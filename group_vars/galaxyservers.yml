# Galaxy
galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.
galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes
galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.
galaxy_layout: root-dir
galaxy_root: /mnt/vdb/galaxy
galaxy_user: {name: "{{ galaxy_user_name }}", shell: /bin/bash}
galaxy_repo: "{{ galaxy_git_repo | default('https://github.com/neoformit/galaxy.git') }}"
galaxy_commit_id: release_23.0
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 23.9
miniconda_channels: ['conda-forge', 'defaults']

# Galaxy Job Configuration
galaxy_job_config:
  runners:
    local_runner:
      load: galaxy.jobs.runners.local:LocalJobRunner
      workers: 4
  handling:
    assign: ['db-skip-locked']
  execution:
    default: local_env
    environments:
      local_env:
        runner: local_runner
        tmp_dir: true
  tools:
    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
      environment: local_env

galaxy_config:
  galaxy:
    # Main Configuration
    admin_users:
    - admin@example.org
    database_connection: "postgresql:///{{ galaxy_db_name }}?host=/var/run/postgresql"
    file_path: /data/datasets
    job_working_directory: /data/jobs
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    job_config: "{{ galaxy_job_config }}" # Use the variable we defined above
    # SQL Performance
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    enable_quotas: true
    allow_user_deletion: true
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    # Tool security
    outputs_to_working_directory: true
    new_user_dataset_access_role_default_private: true # Make datasets private by default

    # Additional config:
    brand: "ðŸš€ Dev"
    check_migrate_tools: false
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    job_resource_params_file: "{{ galaxy_config_dir }}/job_resource_params_conf.xml"
    tool_destinations_config_file: "{{ galaxy_config_dir }}/tool_destinations.yml"
    interactivetools_enable: true
    interactivetools_map: "{{ gie_proxy_sessions_path }}"

  gravity:
    process_manager: systemd
    galaxy_root: "{{ galaxy_root }}/server"
    galaxy_user: "{{ galaxy_user_name }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      # This permits setting of 'secure' headers like REMOTE_USER (and friends)
      # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips
      extra_args: '--forwarded-allow-ips="*"'
      # This lets Gunicorn start Galaxy completely before forking which is faster.
      # https://docs.gunicorn.org/en/stable/settings.html#preload-app
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 2
        pools:
          - job-handlers
          - workflow-schedulers

galaxy_extra_dirs:
  - /data

galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/tool_destinations.yml
    dest: "{{ galaxy_config.galaxy.tool_destinations_config_file }}"
  - src: templates/galaxy/config/job_resource_params_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_resource_params_file }}"
  - src: templates/galaxy/config/tool_conf_interactive.xml.j2
    dest: "{{ galaxy_config_dir }}/tool_conf_interactive.xml"
  - src: files/galaxy/static/welcome.html
    dest: "{{ galaxy_server_dir }}/static/welcome.html"

galaxy_local_tools:
  - testing.xml
  - interactivetool_ena_upload.xml

galaxy_tool_config_files:
  - "{{ galaxy_server_dir }}/config/tool_conf.xml.sample"
  - "{{ galaxy_config_dir }}/tool_conf_interactive.xml"

# Certbot
# certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
# certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
# certbot_auth_method: --webroot
# certbot_install_method: virtualenv
# certbot_auto_renew: yes
# certbot_auto_renew_user: root
# certbot_environment: staging
# certbot_well_known_root: /srv/nginx/_well-known_root
# certbot_share_key_users:
#   - www-data
# certbot_post_renewal: |
#     systemctl restart nginx || true
# certbot_domains:
#  - "{{ inventory_hostname }}"
# certbot_agree_tos: --agree-tos
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
# certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_agree_tos: --agree-tos
certbot_share_key_users:
  - nginx
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_domains:
  - "{{ inventory_hostname }}"
  - "*.interactivetoolentrypoint.interactivetool.{{ inventory_hostname }}"
certbot_dns_provider: cloudflare
certbot_dns_credentials:
  api_token: "{{ vault_dns_cloudflare_api_token }}"
certbot_dns_provider_propagation_seconds: 60

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
  - galaxy-gie-proxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g
  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# Interactive tools
docker_install_compose: false
docker_users:
  - "{{ galaxy_user.name }}"
gie_proxy_dir: /srv/gie-proxy/proxy
gie_proxy_git_version: main
gie_proxy_setup_nodejs: nodeenv
gie_proxy_nodejs_version: "10.13.0"
gie_proxy_virtualenv: /srv/gie-proxy/venv
gie_proxy_virtualenv_command: "{{ pip_virtualenv_command }}"
gie_proxy_setup_service: systemd
gie_proxy_port: 8000
gie_proxy_verbose: true
gie_proxy_sessions_path: "{{ galaxy_mutable_data_dir }}/interactivetools_map.sqlite"
