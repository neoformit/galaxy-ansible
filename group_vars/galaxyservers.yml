---
# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_repo: "{{ galaxy_git_repo | default('https://github.com/neoformit/galaxy.git') }}"
galaxy_commit_id: dev-isee
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: false

galaxy_config:
  # Application config
  galaxy:
    brand: "ðŸš€ Dev"
    admin_users: admin@example.com
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    job_resource_params_file: "{{ galaxy_config_dir }}/job_resource_params_conf.xml"
    tool_destinations_config_file: "{{ galaxy_config_dir }}/tool_destinations.yml"
    interactivetools_enable: true
    interactivetools_map: "{{ gie_proxy_sessions_path }}"

  # uWSGI config (mule messaging)
  uwsgi:
    socket: 127.0.0.1:5000
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2


galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/tool_destinations.yml
    dest: "{{ galaxy_config.galaxy.tool_destinations_config_file }}"
  - src: templates/galaxy/config/job_resource_params_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_resource_params_file }}"
  - src: templates/galaxy/config/tool_conf.xml.j2
    dest: "{{ galaxy_config_dir }}/tool_conf.xml"
  - src: templates/galaxy/config/tool_conf_interactive.xml.j2
    dest: "{{ galaxy_config_dir }}/tool_conf_interactive.xml"
  - src: templates/galaxy/config/local_tool_conf.xml.j2
    dest: "{{ galaxy_config_dir }}/local_tool_conf.xml"


galaxy_local_tools_dir: "{{ galaxy_server_dir }}/tools/local"

galaxy_tool_config_files:
  - "{{ galaxy_config_dir }}/tool_conf.xml"
  - "{{ galaxy_config_dir }}/tool_conf_interactive.xml"
  - "{{ galaxy_config_dir }}/local_tool_conf.xml"

galaxy_dynamic_job_rules:
  - my_rules.py
  - map_resources.py

# Systemd
galaxy_manage_systemd: yes
galaxy_systemd_env: [DRMAA_LIBRARY_PATH="/usr/lib/slurm-drmaa/lib/libdrmaa.so.1"]

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
# certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_agree_tos: --agree-tos
certbot_share_key_users:
  - nginx
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_domains:
  - "{{ inventory_hostname }}"
  - "*.interactivetoolentrypoint.interactivetool.{{ inventory_hostname }}"
certbot_dns_provider: cloudflare
certbot_dns_credentials:
  api_token: "{{ vault_dns_cloudflare_api_token }}"
dns-cloudflare-propagation-seconds: 60

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
  - galaxy-gie-proxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# Slurm
slurm_roles: ['controller', 'exec'] # Which roles should the machine play? exec are execution hosts.
slurm_nodes:
- name: localhost # Name of our host
  CPUs: 2         # Here you would need to figure out how many cores your machine has. For this training we will use 2 but in real life, look at `htop` or similar.
slurm_config:
  SlurmdParameters: config_overrides   # Ignore errors if the host actually has cores != 2
  SelectType: select/cons_res
  SelectTypeParameters: CR_CPU_Memory  # Allocate individual cores/memory instead of entire node

# Interactive tools
docker_install_compose: false
docker_users:
  - "{{ galaxy_user.name }}"
gie_proxy_dir: /srv/gie-proxy/proxy
gie_proxy_git_version: master
gie_proxy_setup_nodejs: nodeenv
gie_proxy_nodejs_version: "10.13.0"
gie_proxy_virtualenv: /srv/gie-proxy/venv
gie_proxy_virtualenv_command: "{{ pip_virtualenv_command }}"
gie_proxy_setup_service: systemd
gie_proxy_port: 8000
gie_proxy_verbose: true
gie_proxy_sessions_path: "{{ galaxy_mutable_data_dir }}/interactivetools_map.sqlite"
